# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /                                  @controllers.Application.index(path="/")

GET     /timeouttest                       @controllers.Application.timeoutTest(delay:Int ?=5)
GET     /testexception                     @controllers.Application.testexception
GET     /testcaught                        @controllers.Application.testcaughtexception
GET     /system/publicdsn                  @controllers.Application.getPublicDsn
GET     /healthcheck                       @controllers.Application.healthcheck

GET     /api/file                          @controllers.Files.list(startAt:Int ?=0,length:Int ?=100)
PUT     /api/file/list                     @controllers.Files.listFiltered(startAt:Int ?=0,length:Int ?=100)
PUT     /api/file                          @controllers.Files.create
GET     /api/file/distinctowners           @controllers.Files.distinctOwners
PUT     /api/file/:id/content              @controllers.Files.uploadContent(id: Int)
GET     /api/file/:id                      @controllers.Files.getitem(id: Int)
GET     /api/file/:id/associations         @controllers.Files.references(id: Int)
PUT     /api/file/:id                      @controllers.Files.update(id: Int)
DELETE  /api/file/:id                      @controllers.Files.delete(id: Int,deleteReferenced:Boolean ?=false)
GET     /api/file/:id/checkOnDisk          @controllers.Files.checkOnDisk(id: Int)
GET     /api/file/:id/storageMetadata      @controllers.Files.fileMetadata(id:Int)
GET     /api/file/:id/assetFolderStorageMetadata      @controllers.Files.assetFolderFileMetadata(id:Int)
POST    /api/file/:projectFileId/changePremiereVersion  @controllers.PremiereVersionConverter.changeVersion(projectFileId:Int, requiredDisplayVersion:String ?= "")
POST     /api/file/:id/content              @controllers.Files.updateContent(id: Int)

GET     /api/storage                       @controllers.StoragesController.list(startAt:Int ?=0,length:Int ?=100)
PUT     /api/storage                       @controllers.StoragesController.create
GET     /api/storage/knowntypes            @controllers.StoragesController.types
GET     /api/storage/:id                   @controllers.StoragesController.getitem(id: Int)
PUT     /api/storage/:id                   @controllers.StoragesController.update(id: Int)
DELETE  /api/storage/:id                   @controllers.StoragesController.delete(id: Int)

GET     /api/template                      @controllers.ProjectTemplateController.list(startAt:Int ?=0,length:Int ?=100)
PUT     /api/template                      @controllers.ProjectTemplateController.create
GET     /api/template/:id                  @controllers.ProjectTemplateController.getitem(id: Int)
PUT     /api/template/:id                  @controllers.ProjectTemplateController.update(id: Int)
DELETE  /api/template/:id                  @controllers.ProjectTemplateController.delete(id: Int)

GET     /api/project                        @controllers.ProjectEntryController.list(startAt:Int ?=0,length:Int ?=100)
GET     /api/project/list                   @controllers.ProjectEntryController.list(startAt:Int ?=0,length:Int ?=100)
PUT     /api/project/list                   @controllers.ProjectEntryController.listFiltered(startAt:Int ?=0,length:Int ?=100)
OPTIONS /api/project/list                   @controllers.Application.corsOptions
GET     /api/project/distinctowners         @controllers.ProjectEntryController.distinctOwners

GET     /api/obits/names                    @controllers.ProjectEntryController.findAvailableObits(prefix:Option[String], limit:Int ?=5)
GET     /api/project/obits                  @controllers.ProjectEntryController.obitsListSorted(name:Option[String], startAt:Int ?= 0, limit:Int ?=50, sort:String ?="name", sortDirection:String ?="asc")

PUT     /api/project                        @controllers.ProjectEntryController.create
GET     /api/project/forFilename            @controllers.Files.projectFromFile(filename: String,startAt:Int ?= 0,limit:Int ?=50, includeBackups:Boolean ?=false)
GET     /api/project/:id/files              @controllers.ProjectEntryController.filesList(id:Int, allVersions:Boolean ?=false)
GET     /api/project/:id/assetFolderFiles   @controllers.ProjectEntryController.assetFolderFilesList(id:Int, allVersions:Boolean ?=false)
GET     /api/project/:id                    @controllers.ProjectEntryController.getitem(id: Int)
GET     /api/project/vsid/:vsid                  @controllers.ProjectEntryController.getByVsid(vsid:String)
PUT     /api/project/:id/wasopened          @controllers.ProjectEntryController.projectWasOpened(id: Int)
PUT     /api/project/:id                    @controllers.ProjectEntryController.updateByAnyone(id: Int)
#DELETE  /api/project/:id                   @controllers.ProjectEntryController.delete(id: Int)
PUT     /api/project/:id/status             @controllers.ProjectEntryController.updateStatus(id:Int)
GET     /api/project/:id/fixPermissions     @controllers.ProjectEntryController.fixPermissions(id:Int)
PUT     /api/project/:id/deleteData         @controllers.ProjectEntryController.deleteData(id: Int)
GET     /api/project/:id/deleteJob          @controllers.ProjectEntryController.deleteJob(id: Int)
GET     /api/project/:id/deleteItems        @controllers.ItemDeleteDataController.listForProject(id: Int)
GET     /api/project/:id/matrixDeleteJob    @controllers.ProjectEntryController.matrixDeleteJob(id: Int)
GET     /api/project/:id/matrixDeleteItems  @controllers.MatrixDeleteDataController.listForProject(id: Int)

GET     /api/valid-users                    @controllers.ProjectEntryController.queryUsersForAutocomplete(prefix:String ?= "", limit:Option[Int])
GET     /api/known-user                     @controllers.ProjectEntryController.isUserKnown(uname:String ?= "")
GET     /api/projecttype                   @controllers.ProjectTypeController.list(startAt:Int ?=0,length:Int ?=100)
PUT     /api/projecttype                   @controllers.ProjectTypeController.create
GET     /api/projecttype/:id               @controllers.ProjectTypeController.getitem(id: Int)
GET     /api/projecttype/:id/postrun       @controllers.ProjectTypeController.listPostrun(id: Int)
PUT     /api/projecttype/:id               @controllers.ProjectTypeController.update(id: Int)
DELETE  /api/projecttype/:id               @controllers.ProjectTypeController.delete(id: Int)

PUT     /api/postrun/scan               @controllers.PostrunActionController.startScan
GET     /api/postrun                   @controllers.PostrunActionController.list(startAt:Int ?=0,length:Int ?=100)
PUT     /api/postrun                   @controllers.PostrunActionController.create
GET     /api/postrun/:id               @controllers.PostrunActionController.getitem(id: Int)
PUT     /api/postrun/:id               @controllers.PostrunActionController.update(id: Int)
DELETE  /api/postrun/:id               @controllers.PostrunActionController.delete(id: Int)
PUT     /api/postrun/:id/projecttype/:typeid   @controllers.PostrunActionController.associate(id: Int, typeid:Int)
DELETE  /api/postrun/:id/projecttype/:typeid   @controllers.PostrunActionController.unassociate(id: Int, typeid: Int)
GET     /api/postrun/:id/depends        @controllers.PostrunActionController.listDependencies(id:Int)
PUT     /api/postrun/:id/depends/:dep   @controllers.PostrunActionController.addDependency(id:Int, dep:Int)
DELETE  /api/postrun/:id/depends/:dep   @controllers.PostrunActionController.removeDependency(id:Int, dep:Int)
GET     /api/postrun/test_sort/:project_type_id @controllers.PostrunActionController.testPostrunSort(project_type_id:Int)

GET     /api/default                    @controllers.DefaultsController.list
GET     /api/default/:key               @controllers.DefaultsController.getForKey(key:String)
PUT     /api/default/:key               @controllers.DefaultsController.putForKey(key:String)
DELETE  /api/default/:key               @controllers.DefaultsController.deleteForKey(key:String)

GET     /api/pluto/workinggroup            @controllers.PlutoWorkingGroupController.list(startAt:Int ?=0,length:Int ?=100, showHidden:Option[Boolean])
OPTIONS /api/pluto/workinggroup            @controllers.Application.corsOptions
PUT     /api/pluto/workinggroup/:id        @controllers.PlutoWorkingGroupController.update(id:Int)
GET     /api/pluto/workinggroup/:id        @controllers.PlutoWorkingGroupController.getitem(id:Int)
POST    /api/pluto/workinggroup            @controllers.PlutoWorkingGroupController.create
DELETE    /api/pluto/workinggroup/:id      @controllers.PlutoWorkingGroupController.delete(id:Int)

POST    /api/prexit/commission             @controllers.PlutoCommissionController.createByAnyone

GET     /api/pluto/commission/:id          @controllers.PlutoCommissionController.getitem(id:Int)

POST    /api/pluto/commission              @controllers.PlutoCommissionController.createByAnyone
GET     /api/pluto/commission              @controllers.PlutoCommissionController.list(startAt:Int ?=0, length:Int ?=100)
PUT     /api/pluto/commission/list         @controllers.PlutoCommissionController.listFilteredAndSorted(startAt:Int ?=0, length:Int ?=100, sort:String ?="created", sortDirection:String ?="desc")
OPTIONS /api/pluto/commission/list         @controllers.Application.corsOptions
PUT     /api/pluto/commission/:id           @controllers.PlutoCommissionController.updateByAnyone(id:Int)
PUT     /api/pluto/commission/:id/status   @controllers.PlutoCommissionController.updateStatus(id:Int)
PUT     /api/pluto/commission/:id/deleteData    @controllers.ProjectEntryController.deleteCommissionData(id: Int)

GET     /api/assetfolder/lookup            @controllers.AssetFolderController.assetFolderForPath(path:String)
GET     /api/project/:projectId/assetfolder @controllers.AssetFolderController.assetFolderForProject(projectId:Int)

POST    /api/login                         @controllers.Application.authenticate
OPTIONS /api/login                         @controllers.Application.corsOptions
POST    /api/logout                        @controllers.Application.logout
GET     /api/isLoggedIn                    @controllers.Application.isLoggedIn
OPTIONS /api/isLoggedIn                     @controllers.Application.corsOptions
GET     /api/isAdmin                       @controllers.Application.checkIsAdmin

GET     /api/system/plutoconfig            @controllers.System.plutoconfig

GET     /api/history/my/actions           @controllers.AuditController.myLastActions(actionType:Option[String], startAt:Int ?=0, length:Int ?=100)

POST    /api/validation                    @controllers.ValidationsController.startValidation
GET     /api/validation                     @controllers.ValidationsController.getJobs(userName:Option[String], status:Option[String], limit:Option[Int])
GET     /api/validation/:jobId/faults       @controllers.ValidationsController.faultsForJobId(jobId:String, from:Int ?= 0, limit:Int ?=100, sortColumn:Option[String], sortOrder:Option[String])
GET     /api/validation/:jobId              @controllers.ValidationsController.jobDetails(jobId:String)

GET     /api/premiereVersion/:clientVersionString                @controllers.PremiereVersionConverter.lookupClientVersion(clientVersionString:String)
GET     /api/premiereVersion/internal/:internalVersion           @controllers.PremiereVersionConverter.lookupInternalVersion(internalVersion:Int)
GET     /api/premiereVersion                                     @controllers.PremiereVersionConverter.allVersions
POST    /api/premiereVersion                                     @controllers.PremiereVersionConverter.createOrUpdate
DELETE  /api/premiereVersion/:internalVersion                    @controllers.PremiereVersionConverter.delete(internalVersion:Int)
POST    /api/premiereVersion/scanExistingProjects                @controllers.PremiereVersionConverter.scanAllVersions(projectTypeId:Int ?= 0)

GET     /api/buckets                        @controllers.Buckets.list

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
GET     /meta/*file                 controllers.Assets.at(path="/public/meta", file)
GET     /*tail                      @controllers.Application.index(tail)
